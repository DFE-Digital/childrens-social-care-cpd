name: 'Terraform Destroy'

on: 
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Terraform Workspace which should map to GitHub Environment'
        required: true
        default: 'Dev'
        type: choice
        options:
          - Dev
          - Test
          - Pre-Prod
          - Prod
          - Load-Test

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: ${{inputs.workspace}}
    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}
      TF_VAR_tenant_id: ${{secrets.TF_ARM_TENANT_ID}}
      TF_VAR_cpd_client_id: ${{secrets.TF_VAR_CPD_CLIENT_ID}}
      TF_VAR_cpd_client_secret: ${{secrets.TF_VAR_CPD_CLIENT_SECRET}}
      TF_VAR_cpd_keyvaultendpoint: ${{secrets.TF_VAR_CPD_KEYVAULTENDPOINT}}
      TF_VAR_cpd_googleanalyticstag: ${{secrets.TF_VAR_CPD_GOOGLEANALYTICSTAG}}
      TF_VAR_cpd_space_id: ${{secrets.TF_VAR_CPD_SPACE_ID}}
      TF_VAR_cpd_preview_key: ${{secrets.TF_VAR_CPD_PREVIEW_KEY}}
      TF_VAR_cpd_delivery_key: ${{secrets.TF_VAR_CPD_DELIVERY_KEY}}
      TF_VAR_cpd_clarity: ${{secrets.TF_VAR_CPD_CLARITY}}
      TF_VAR_cpd_image_tag: ${{vars.TF_VAR_CPD_IMAGE_TAG}}
      TF_VAR_cpd_feature_polling_interval: ${{vars.TF_VAR_CPD_FEATURE_POLLING_INTERVAL}}
      TF_VAR_cpd_search_api_key: ${{secrets.TF_VAR_CPD_SEARCH_API_KEY}}
      TF_VAR_cpd_search_client_api_key: ${{secrets.TF_VAR_CPD_SEARCH_CLIENT_API_KEY}}
      TF_VAR_cpd_instrumentation_connectionstring: ${{secrets.TF_VAR_CPD_INSTRUMENTATION_CONNECTIONSTRING}}
      TF_VAR_cpd_search_batch_size: ${{secrets.TF_VAR_CPD_SEARCH_BATCH_SIZE}}
      TF_VAR_cpd_search_endpoint: ${{secrets.TF_VAR_CPD_SEARCH_ENDPOINT}}
      TF_VAR_cpd_search_index_name: ${{secrets.TF_VAR_CPD_SEARCH_INDEX_NAME}}
      TF_VAR_cpd_search_recreate_index_on_rebuild: ${{secrets.TF_VAR_CPD_SEARCH_RECREATE_INDEX_ON_REBUILD}}
      TF_VAR_cpd_gf_password: ${{secrets.TF_CPD_GF_PASSWORD}}
      TF_VAR_cpd_gf_plugins: ${{secrets.TF_VAR_CPD_GF_PLUGINS}}
      TF_VAR_cpd_gf_image_tag: ${{vars.TF_VAR_CPD_GF_IMAGE_TAG}}
      TF_VAR_whitelist_ips: ${{vars.TF_VAR_WHITELIST_IPS}}
      TF_VAR_vcs_tag: ${{github.event.release.tag_name}}
      TF_WORKSPACE: ${{inputs.workspace}}

    defaults:
      run:
        shell: bash

    steps:
  
    # Checkout code
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=Terraform init -backend-config=${TF_WORKSPACE}-backend.conf

    - name: Terraform Destroy
      run: terraform -chdir=Terraform destroy -auto-approve -input=false
