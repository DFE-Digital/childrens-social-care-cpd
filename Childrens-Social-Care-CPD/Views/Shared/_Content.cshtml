@using Childrens_Social_Care_CPD.Contentful;
@using Childrens_Social_Care_CPD.Contentful.Models;

@model Content

@{
    ContextModel model = (ContextModel)ViewBag.ContextModel;
    // We use the content stack to track circular dependencies and prevent overflows
    model.ContentStack.Push(Model.Id);

    if (Model.Items != null)
    {
        foreach (var item in Model.Items)
        {
            var preventOverflow = item as Content;
            if (preventOverflow != null && model.ContentStack.Contains(preventOverflow.Id))
            {
                <partial name="_OverflowWarning" />
                continue;
            }

            if (item is Feedback && Model.ShowPrintThisPage)
            {
                <partial name="_PrintThisPage" />
            }

            await Html.RenderContentfulPartialAsync(item);
        }
    }

    model.ContentStack.Pop();

    switch (Model.PageType) {
        case PageType.PathwaysContentsPage:
            <partial name="_PathwaysModuleIndex" />
            break;
        case PageType.PathwaysOverviewPage:
            <partial name="_PathwaysOverview" />
            break;
        case PageType.PathwaysTrainingContent:
            <partial name="_PathwaysContent" />
            break;
        case PageType.AllPathwaysOverviewPage:
            <partial name="_AllPathwaysOverviewPage" />
            break;
    }
}