@using Childrens_Social_Care_CPD.Contentful.Models;
@using Childrens_Social_Care_CPD.Contentful;
@using Contentful.Core.Models;
@using Microsoft.AspNetCore.Html;
@using System.Text;

@model Document

@functions {

    public async Task RenderParagraph(Paragraph contentfulParagraph)
    {
        var paragraph = new TagBuilder("p");
        paragraph.AddCssClass("govuk-body-m");
        @paragraph.RenderStartTag()

        foreach (var content in contentfulParagraph.Content)
        {
            switch (content)
            {
                case Text text:
                        @text.ToHtml()
                        break;
                case EntryStructure entryStructure:
                    {
                        switch (entryStructure.Data.Target)
                        {
                            case RoleList roleList:
                                {

                                    await Html.RenderPartialAsync("_InlineRoleList", roleList);
                                    break;
                                }
                        }
                        break;
                    }
                case (Hyperlink hyperlink):
                    @hyperlink.ToHtml()
                    break;
            }
        }

        @paragraph.RenderEndTag()
    }

    public async Task RenderQuote(Quote quote)
    {
        var div = new TagBuilder("div");
        div.AddCssClass("govuk-inset-text");
        @div.RenderStartTag()

        foreach (var content in quote.Content)
        {
            var paragraph = content as Paragraph;
            if (paragraph != null)
            {
                await RenderParagraph(paragraph);
            }
        }

        @div.RenderEndTag()
    }

    public void RenderList(List list)
    {
        @if (list.Content.Count > 0)
        {
            <ul class="govuk-list govuk-list--bullet">

                @foreach (var link in list.Content)
                {
                    var innerElement = (Paragraph)(((ListItem)link).Content[0]);
                    StringBuilder contentBuilder = new StringBuilder();

                    if (@innerElement.Content.Any(c => c.GetType() == typeof(Hyperlink)))
                    {
                        @foreach (var content in @innerElement.Content)
                        {
                            if (content.GetType() == typeof(Text))
                            {
                                contentBuilder.Append((((Text)content).Value));
                            }
                            if (content.GetType() == typeof(Hyperlink))
                            {
                                var linkElement = ((Hyperlink)content);
                                var linkText = ((Text)(linkElement).Content[0]).Value;
                                contentBuilder.Append(string.Format(("<a href={0}>{1}</a>"), linkElement.Data.Uri, linkText));
                            }
                        }
                    }
                    else
                    {
                        contentBuilder.Append((((Text)innerElement.Content[0]).Value));
                    }
                    <li>@Html.Raw(contentBuilder.ToString())</li>
                }

            </ul>
        }
    }

    public void RenderTable(Table table)
    {
        @if (table.Content.Any())
        {
            <table class="govuk-table">
                @foreach (TableRow row in table.Content)
                {
                    if (@row.Content.Any(x => x.GetType() == typeof(TableHeader)))
                    {
                        <thead class="govuk-table__head">
                            <tr class="govuk-table__row">
                                @foreach (TableHeader header in @row.Content)
                                {
                                    <th scope="col" class="govuk-table__header">@(((Text)((Paragraph)header.Content[0]).Content[0]).Value)</th>
                                }
                            </tr>
                        </thead>
                    }
                }
                <tbody class="govuk-table__body">
                    @foreach (TableRow row in table.Content)
                    {
                        if (@row.Content.Any(x => x.GetType() == typeof(TableCell)))
                        {
                            <tr class="govuk-table__row">
                                @foreach (TableCell tableCell in @row.Content)
                                {
                                    <td class="govuk-table__cell">@(((Text)((Paragraph)tableCell.Content[0]).Content[0]).Value)</td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    }
}

@{
    if (Model == null) return;

    foreach (IContent node in Model.Content ?? Enumerable.Empty<IContent>())
    {
        switch (node)
        {
            case HorizontalRuler hr: @hr.ToHtml(); break;
            case Paragraph paragraph: await RenderParagraph(paragraph); break;
            case List list: RenderList(list); break;
            case Heading1 heading: @heading.ToHtml(); break;
            case Heading2 heading: @heading.ToHtml(); break;
            case Heading3 heading: @heading.ToHtml(); break;
            case Heading4 heading: @heading.ToHtml(); break;
            case Heading5 heading: @heading.ToHtml(); break;
            case Heading6 heading: @heading.ToHtml(); break;
            case Table table: RenderTable(table); break;
            case Quote quote: await RenderQuote(quote); break;
        }
    }
}