@using Childrens_Social_Care_CPD.Constants;
@using Childrens_Social_Care_CPD.Contentful.Models;
@using Contentful.Core.Models;
@using System.Text
@using Microsoft.AspNetCore.Html;

@model Document

@functions {
    public static string ParseHyperlinkHelper(IContent content)
    {
        var linkElement = ((Contentful.Core.Models.Hyperlink)content);
        var linkText = ((Contentful.Core.Models.Text)(linkElement).Content[0]).Value;
        var linkHtmlString = string.Format(("<a class=\"{0}\" datatestid={1} href={1}>{2}</a>"), "govuk-link", linkElement.Data.Uri, linkText);
        return linkHtmlString;
    }

    public static IHtmlContent GetHeadingTagString(IContent content, string tag, string className)
    {
        var tagBuilder = new TagBuilder(tag);
        foreach (var headerContent in ((IHeading)content).Content)
        {
            if (headerContent.GetType() == typeof(Text) && !string.IsNullOrEmpty((((Contentful.Core.Models.Text)headerContent).Value)))
            {
                tagBuilder.InnerHtml.Append(((Text)headerContent).Value);
            }

            if (headerContent.GetType() == typeof(Hyperlink))
            {
                tagBuilder.InnerHtml.AppendHtml(@ParseHyperlinkHelper(headerContent));
            }
        }
        return tagBuilder;
    }

    public async Task RenderParagraph(Paragraph paragraph)
    {
        if (paragraph.Content.Any(c => c.GetType() == typeof(Hyperlink)))
        {
            StringBuilder contentBuilder = new StringBuilder();
            @foreach (var content in paragraph.Content)
            {
                if (content.GetType() == typeof(Text))
                {
                    contentBuilder.Append((((Contentful.Core.Models.Text)content).Value));
                }
                if (content.GetType() == typeof(Hyperlink))
                {
                    var linkElement = ((Contentful.Core.Models.Hyperlink)content);
                    var linkText = ((Contentful.Core.Models.Text)(linkElement).Content[0]).Value;
                    contentBuilder.Append(string.Format(("<a class=\"govuk-link\" href={0}>{1}</a>"), linkElement.Data.Uri, linkText));
                }
            }
            @Html.Raw($"<p class={"govuk-body-m"}>{contentBuilder.ToString()}</p>")
        }
        else
        {
            @foreach (var content in paragraph.Content)
            {
                switch (content)
                {
                    case Text text : { 
                        if (!string.IsNullOrEmpty(text.Value))
                        {
                             <p class="govuk-body-m">@text.Value</p>
                        }
                        break; 
                    }
                    case EntryStructure entryStructure: {
                        switch (entryStructure.Data.Target)
                        {
                            case RoleList roleList : {
                                await Html.RenderPartialAsync("_InlineRoleList", roleList);
                                break;
                            }
                        }
                        break; 
                    }
                }
            }
        }
    }

    public void RenderList(List list)
    {
        @if (list.Content.Count > 0)
        {
            <ul class="govuk-list govuk-list--bullet">

                @foreach (var link in list.Content)
                {
                    var innerElement = (Contentful.Core.Models.Paragraph)(((Contentful.Core.Models.ListItem)link).Content[0]);
                    StringBuilder contentBuilder = new StringBuilder();

                    if (@innerElement.Content.Any(c => c.GetType() == typeof(Hyperlink)))
                    {
                        @foreach (var content in @innerElement.Content)
                        {
                            if (content.GetType() == typeof(Text))
                            {
                                contentBuilder.Append((((Contentful.Core.Models.Text)content).Value));
                            }
                            if (content.GetType() == typeof(Hyperlink))
                            {
                                var linkElement = ((Contentful.Core.Models.Hyperlink)content);
                                var linkText = ((Contentful.Core.Models.Text)(linkElement).Content[0]).Value;
                                contentBuilder.Append(string.Format(("<a href={0}>{1}</a>"), linkElement.Data.Uri, linkText));
                            }
                        }
                    }
                    else
                    {
                        contentBuilder.Append((((Contentful.Core.Models.Text)innerElement.Content[0]).Value));
                    }
                    <li>@Html.Raw(contentBuilder.ToString())</li>
                }

            </ul>
        }
    }

    public void RenderTable(Table table)
    {
        @if (table.Content.Any())
        {
            <table class="govuk-table">
                @foreach (TableRow row in table.Content)
                {
                    if (@row.Content.Any(x => x.GetType() == typeof(Contentful.Core.Models.TableHeader)))
                    {
                        <thead class="govuk-table__head">
                            <tr class="govuk-table__row">
                                @foreach (TableHeader header in @row.Content)
                                {
                                    <th scope="col" class="govuk-table__header">@(((Contentful.Core.Models.Text)((Contentful.Core.Models.Paragraph)header.Content[0]).Content[0]).Value)</th>
                                }
                            </tr>
                        </thead>
                    }
                }
                <tbody class="govuk-table__body">
                    @foreach (TableRow row in table.Content)
                    {
                        if (@row.Content.Any(x => x.GetType() == typeof(Contentful.Core.Models.TableCell)))
                        {
                            <tr class="govuk-table__row">
                                @foreach (TableCell tableCell in @row.Content)
                                {
                                    <td class="govuk-table__cell">@(((Contentful.Core.Models.Text)((Contentful.Core.Models.Paragraph)tableCell.Content[0]).Content[0]).Value)</td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
    }

    void RenderHr(HorizontalRuler hr)
    {
        <hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible" />
    }
}

@{

    if (Model == null) return;

    foreach (IContent node in Model.Content ?? Enumerable.Empty<IContent>())
    {
        switch (node)
        {
            case HorizontalRuler hr: RenderHr(hr); break;
            case Paragraph paragraph: await RenderParagraph(paragraph); break;
            case List list: RenderList(list); break;
            case Heading1: @GetHeadingTagString(node, SiteConstants.HEADING1, SiteConstants.GOVUKHEADINGXL); break;
            case Heading2: @GetHeadingTagString(node, SiteConstants.HEADING2, SiteConstants.GOVUKHEADINGL); break;
            case Heading3: @GetHeadingTagString(node, SiteConstants.HEADING3, SiteConstants.GOVUKHEADINGM); break;
            case Heading4: @GetHeadingTagString(node, SiteConstants.HEADING4, SiteConstants.GOVUKHEADINGM); break;
            case Heading5: @GetHeadingTagString(node, SiteConstants.HEADING5, SiteConstants.GOVUKHEADINGM); break;
            case Heading6: @GetHeadingTagString(node, SiteConstants.HEADING6, SiteConstants.GOVUKHEADINGM); break;
            case Table table: RenderTable(table); break;
        }
    }
}