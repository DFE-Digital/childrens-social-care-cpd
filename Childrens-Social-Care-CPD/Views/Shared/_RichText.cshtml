@using Childrens_Social_Care_CPD.Contentful.Models;
@using Childrens_Social_Care_CPD.Contentful;
@using Childrens_Social_Care_CPD.Contentful.Renderers;
@using Contentful.Core.Models;
@using Microsoft.AspNetCore.Html;
@using System.Text;

@model Document
@inject IRenderer<Heading1> _heading1Renderer
@inject IRenderer<Heading2> _heading2Renderer
@inject IRenderer<Heading3> _heading3Renderer
@inject IRenderer<Heading4> _heading4Renderer
@inject IRenderer<Heading5> _heading5Renderer
@inject IRenderer<Heading6> _heading6Renderer
@inject IRendererWithOptions<Paragraph> _paragraphRenderer
@inject IRenderer<Quote> _quoteRenderer
@inject IRenderer<HorizontalRuler> _horizontalRulerRenderer
@inject IRenderer<Table> _tableRenderer
@inject IRenderer<List> _listRenderer
@inject IRenderer<RoleList> _roleListRenderer
@inject IRenderer<AssetStructure> _assetStructureRenderer

@{
    if (Model == null) return;

    foreach (IContent node in Model.Content ?? Enumerable.Empty<IContent>())
    {
        switch (node)
        {
            case HorizontalRuler hr: @_horizontalRulerRenderer.Render(hr) break;
            case Paragraph paragraph: @_paragraphRenderer.Render(paragraph, new RendererOptions("", (string)ViewData["RenderStyle"] ?? null)) break;
            case List list: @_listRenderer.Render(list) break;
            case Heading1 heading1: @_heading1Renderer.Render(heading1) break;
            case Heading2 heading2: @_heading2Renderer.Render(heading2) break;
            case Heading3 heading3: @_heading3Renderer.Render(heading3) break;
            case Heading4 heading4: @_heading4Renderer.Render(heading4) break;
            case Heading5 heading5: @_heading5Renderer.Render(heading5) break;
            case Heading6 heading6: @_heading6Renderer.Render(heading6) break;
            case Table table: @_tableRenderer.Render(table) break;
            case Quote quote: @_quoteRenderer.Render(quote) break;
            case EntryStructure entryStructure: {
                    switch (entryStructure.Data.Target)
                    {
                        case RoleList roleList: @_roleListRenderer.Render(roleList)
                            break;
                    }
                    break;
                }
            case AssetStructure assetStructure: @_assetStructureRenderer.Render(assetStructure) break;
        }
    }
}