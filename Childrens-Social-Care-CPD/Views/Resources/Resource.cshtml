@using Childrens_Social_Care_CPD.Configuration
@using Childrens_Social_Care_CPD.Contentful.Models;
@using Childrens_Social_Care_CPD.Contentful.Renderers;
@using Contentful.Core.Models;

@model Content;

@inject IRenderer<RelatedContent> _relatedContentRenderer
@inject IFeaturesConfig featuresConfig

@{
    Layout = "_DefaultPageLayout";
}

@section Head {
    @if (ViewData.TryGetValue("StateModel", out var stateModel) && ((StateModel)stateModel).IncludeMediaPlayer)
    {
        <link href="/css/mediaelement-player.min.css" rel="stylesheet" />
    }
}

<div class="govuk-grid-row">
    <div class="govuk-grid-column-three-quarters">
        <span class="govuk-caption-l">Resources</span>
        <h1>@Model.ContentTitle</h1>

        @if (Model.ContentSubtitle != null)
        {
            <p class="govuk-body">@Model.ContentSubtitle</p>
        }
        
        @if (Model.Navigation != null)
        {
            <aside>
                <cpd-resource-nav navigation="@Model.Navigation?.Items" selected="@Model.Id" />
            </aside>
        }
    </div>
</div>

<hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible">

<div class="govuk-grid-row">
    <div class="govuk-grid-column-three-quarters">
        <cpd-properties-list items="@ViewBag.Properties" />

        @if (featuresConfig.IsEnabled(Features.FeedbackControl))
        {
            <p class="govuk-body">
                <a id="feedbackAnchor" href="#page-Feedback">Give feedback about this page</a>
            </p>
        }
    </div>
</div>

<hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible">

<partial name="_Content" model="Model" />

<cpd-resource-page-nav navigation="@Model.Navigation?.Items" current="@Model.Id" />

@if (featuresConfig.IsEnabled(Features.FeedbackControl))
{
    <div id="pageFeedback" class="govuk-!-margin-top-2" tabindex="-1">
        <partial name="_Feedback" />
    </div>
}

@_relatedContentRenderer.Render(Model.RelatedContent)

@section Scripts {
    @if (featuresConfig.IsEnabled(Features.FeedbackControl))
    {
        <script type="text/javascript">
            document.addEventListener('DOMContentLoaded', function () {
                const feedbackAnchor = document.getElementById("feedbackAnchor")
                const feedbackDetails = document.querySelector("[data-module-id=feedbackDetail]")

                if (feedbackDetails) {
                    feedbackAnchor.addEventListener("click", (event) => {
                        feedbackDetails.setAttribute("open", "")
                    })
                }
            });
        </script>
    }
}

@if (ViewData.TryGetValue("StateModel", out var stateModel) && ((StateModel)stateModel).IncludeMediaPlayer)
{
    Html.RequireScriptUrl("~/javascript/mediaelement-and-player.min.js");
    Html.RequireScriptUrl("~/javascript/mediaelement-configuration.js");
}